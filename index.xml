<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>g7shot's blog</title><link>https://g7shot.github.io/</link><description>g7shot's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 26 Dec 2024 17:57:22 +0800</lastBuildDate><atom:link href="https://g7shot.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>.Net Remoting 系列二】Solarwinds ARM 漏洞分析</title><link>https://g7shot.github.io/posts/net/netremoting-solarwindsarm/</link><pubDate>Thu, 26 Dec 2024 17:57:22 +0800</pubDate><author><name>g7shot</name></author><guid>https://g7shot.github.io/posts/net/netremoting-solarwindsarm/</guid><description>&lt;p>&lt;code>本篇主要是以Solarwinds Arm产品介绍自定义ServerChanel的场景，漏洞分析利用是其次，事实上是去年挖的没有详细记录，后续写的，勿怪哈哈哈&lt;/code>&lt;/p></description></item><item><title>【.Net Remoting 系列三】Veeam Backup .Net Remoting RCE (CVE-2024-40711)</title><link>https://g7shot.github.io/posts/net/netremoting-veeambackuprce/</link><pubDate>Thu, 26 Dec 2024 17:57:22 +0800</pubDate><author><name>g7shot</name></author><guid>https://g7shot.github.io/posts/net/netremoting-veeambackuprce/</guid><description><![CDATA[<h2 id="前置知识" class="headerLink">
    <a href="#%e5%89%8d%e7%bd%ae%e7%9f%a5%e8%af%86" class="header-mark"></a>前置知识</h2><p><a href="https://codewhitesec.blogspot.com/2022/01/dotnet-remoting-revisited.html" target="_blank" rel="noopener noreferrer">https://codewhitesec.blogspot.com/2022/01/dotnet-remoting-revisited.html</a>
<a href="https://github.com/codewhitesec/RogueRemotingServer" target="_blank" rel="noopener noreferrer">https://github.com/codewhitesec/RogueRemotingServer</a></p>
<h2 id="remoting代码逻辑分析" class="headerLink">
    <a href="#remoting%e4%bb%a3%e7%a0%81%e9%80%bb%e8%be%91%e5%88%86%e6%9e%90" class="header-mark"></a>Remoting代码逻辑分析</h2><p>按照之前的思路：</p>
<ol>
<li>注册的Channel类型（全局搜ChannelServices#RegisterChannelInternal）</li>
<li>sinkProviderChains</li>
<li>TypeFilterLevel</li>
<li>注册的objecturi（全局搜RemotingConfiguration#RegisterWellKnownServiceType或RemotingServices#Marshal）</li>
<li>处理消息逻辑（<code>IServerChannelSink#ProcessMessage</code>的实现）</li>
</ol>
<p>首先定位到Veeam.Common.Remoting.dll文件发现有TransportSink和FormatterSink相关的类，但是并没有自定义的ServerChannel，搜索<code>ChannelServices#RegisterChannelInternal</code>的调用找到注册ServerChannel的地方：
<img class="tw-inline" loading="lazy" src=https://g7shot.github.io/Pasted%20image%2020240911111358_17427803183180432539.png srcset="/Pasted%20image%2020240911111358_17427803183180432539_hu11470388258718071520.webp 800w, /Pasted%20image%2020240911111358_17427803183180432539_hu1415203375133732370.webp 1200w, /Pasted%20image%2020240911111358_17427803183180432539_hu10199084661629936497.webp 1600w"   height="410" width="1255">
挨个看过去只有CSrvTcpChannelRegistration类注册了一个tcpServerChannel，具体调用代码如下：</p>]]></description></item><item><title>.Net Remoting 系列一</title><link>https://g7shot.github.io/posts/net/netremoting101/</link><pubDate>Tue, 24 Dec 2024 17:57:22 +0800</pubDate><author><name>g7shot</name></author><guid>https://g7shot.github.io/posts/net/netremoting101/</guid><description>&lt;p>&lt;code>前言：笔者在代码审计时碰到许多以.Net Remoting技术开发的应用如SolarWinds、VeeamBackup、Ivanti等产品，尽管随着 WCF 和 gRPC 等更现代化技术的兴起，.NET Remoting 已逐渐淡出主流，但是依然有其研究的价值，本次主要以TcpChannel为主分析其工作原理、应用场景，后续会通过两个漏洞介绍.Net Remoting在不同场景下的利用姿势和挖掘思路&lt;/code>&lt;/p></description></item><item><title>Telerik Reporting XML反序列化的0day挖掘</title><link>https://g7shot.github.io/posts/net/telerik-rce/</link><pubDate>Wed, 30 Oct 2024 17:57:22 +0800</pubDate><author><name>g7shot</name></author><guid>https://g7shot.github.io/posts/net/telerik-rce/</guid><description>帮朋友审计一个项目，发现一个老版本Telerik.Reporting（和MOVEit/WS_FTP同属于Progress Software旗下产品）三方组件的一个可以导致RCE通用问题，后续了解了一下这个东西有web产品，也能集成到别的项目里面于是就研究下了新版本，同样也有类似的问题。</description></item><item><title>SolarWinds ARM json.net 反序列化</title><link>https://g7shot.github.io/posts/net/solarwinds-arm-rce/</link><pubDate>Tue, 29 Oct 2024 17:57:22 +0800</pubDate><author><name>g7shot</name></author><guid>https://g7shot.github.io/posts/net/solarwinds-arm-rce/</guid><description><![CDATA[<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>之前整理了<a href="https://paper.seebug.org/3064/" target="_blank" rel="noopener noreferrer">Solarwinds历史漏洞分析</a>一系列的json.net反序列化漏洞，本文分析下Solarwinds ARM产品一系列的json反序列化，最后补充下json.net常见的几种修复方式。</p>]]></description></item><item><title>SolarWinds json反序列化导致的多个RCE</title><link>https://g7shot.github.io/posts/net/solarwinds-json-rce/</link><pubDate>Mon, 28 Oct 2024 17:57:22 +0800</pubDate><author><name>g7shot</name></author><guid>https://g7shot.github.io/posts/net/solarwinds-json-rce/</guid><description><![CDATA[<h2 id="环境搭建和介绍" class="headerLink">
    <a href="#%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba%e5%92%8c%e4%bb%8b%e7%bb%8d" class="header-mark"></a>环境搭建和介绍</h2><p>这系列漏洞都是基于Json.net的反序列化：</p>
<ul>
<li>三方组件自定义不安全的反序列化RCE（CVE-2022-38108）</li>
<li>JsonConverter自定义不安全反序列化RCE（CVE-2022-36957）</li>
<li>挖掘适用于Json的TextFormattingRunProperties利用链RCE（CVE-2022-38111）</li>
<li>利用Json特性挖掘适用于solarwinds的利用链RCE（CVE-2022-47503、CVE-2022-47507、CVE-2023-23836、CVE-2022-36957）
最后通过这些漏洞拓展了挖掘Json.net反序列化的思路。</li>
</ul>
<p>配置rabbitmq用户，默认用户orion:</p>]]></description></item><item><title>SolarWinds DeserializeFromStrippedXml RCE</title><link>https://g7shot.github.io/posts/net/solarwinds-deserializefromstrippedxml-rce/</link><pubDate>Sun, 27 Oct 2024 17:57:22 +0800</pubDate><author><name>g7shot</name></author><guid>https://g7shot.github.io/posts/net/solarwinds-deserializefromstrippedxml-rce/</guid><description>SolarWinds DeserializeFromStrippedXml RCE</description></item><item><title>first blog</title><link>https://g7shot.github.io/posts/first/</link><pubDate>Fri, 25 Oct 2024 17:57:22 +0800</pubDate><author><name>g7shot</name></author><guid>https://g7shot.github.io/posts/first/</guid><description>&lt;p>之前的博客止步于2021年，内容是渗透和java相关的也没有新东西了没有保留的必要了（懒得迁移），于是删了博客换了主题，希望以后能坚持写点东西吧。&lt;/p></description></item></channel></rss>